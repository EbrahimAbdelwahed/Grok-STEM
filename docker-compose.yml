
# docker-compose.yml
version: '3.8' # Specifies the Docker Compose file format version

services:
  # Qdrant Vector Database Service
  qdrant:
    image: qdrant/qdrant:latest # Use the official Qdrant image
    container_name: grok_stem_qdrant
    ports:
      - "6333:6333" # gRPC port
      - "6334:6334" # HTTP/REST port
    volumes:
      - qdrant_storage:/qdrant/storage # Persist Qdrant data using a named volume
    networks:
      - grok_stem_network # Connect to the custom network
    restart: unless-stopped # Restart policy

  # Backend Service (FastAPI)
  backend:
    container_name: grok_stem_backend
    build:
      context: ./backend # Directory containing the backend Dockerfile and code
      dockerfile: Dockerfile
    ports:
      - "8000:8000" # Map host port 8000 to container port 8000 (FastAPI default)
    volumes:
      - ./backend:/app # Mount backend code into the container for development (hot-reloading)
    env_file:
      - ./backend/.env # Load environment variables from .env file in backend directory
    networks:
      - grok_stem_network
    depends_on: # Ensure Qdrant starts before the backend
      - qdrant
    restart: unless-stopped
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload # Command to run FastAPI with hot-reloading

  # Frontend Service (React/Vite)
  frontend:
    container_name: grok_stem_frontend
    build:
      context: ./frontend # Directory containing the frontend Dockerfile and code
      dockerfile: Dockerfile
    ports:
      - "5173:5173" # Map host port 5173 to container port 5173 (Vite default)
    volumes:
      - ./frontend:/app # Mount frontend code
      - /app/node_modules # Use node_modules from within the container image, not the host
    networks:
      - grok_stem_network
    depends_on: # Ensure backend is ready (or at least started) before frontend tries connecting
      - backend
    restart: unless-stopped
    environment:
      - WATCHPACK_POLLING=true # Helps with detecting file changes within Docker volumes on some systems

# Named volume for Qdrant data persistence
volumes:
  qdrant_storage:

# Custom network for inter-service communication
networks:
  grok_stem_network:
    driver: bridge
